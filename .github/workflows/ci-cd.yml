name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: allrealmen
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build -x test

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        cat >>~/.ssh/config <<END
        Host ec2
          HostName ${{ env.EC2_HOST }}
          User ${{ env.EC2_USER }}
          IdentityFile ~/.ssh/deploy_key
          StrictHostKeyChecking no
        END

    - name: Update docker-compose.yml
      run: |
        sed -i "s|kimsee/allrealmen:latest|${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}|g" docker-compose.yml

    - name: Create .env file
      run: |
        cat > .env << EOL
        # MongoDB
        MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}

        # OAuth2
        NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
        OAUTH_REDIRECT_BASE_URL=${{ secrets.OAUTH_REDIRECT_BASE_URL }}

        # JWT
        JWT_SECRET=${{ secrets.JWT_SECRET }}

        # Naver Cloud SMS
        NAVER_CLOUD_ACCESS_KEY=${{ secrets.NAVER_CLOUD_ACCESS_KEY }}
        NAVER_CLOUD_SECRET_KEY=${{ secrets.NAVER_CLOUD_SECRET_KEY }}
        NAVER_CLOUD_SERVICE_ID=${{ secrets.NAVER_CLOUD_SERVICE_ID }}
        NAVER_CLOUD_SENDER_PHONE=${{ secrets.NAVER_CLOUD_SENDER_PHONE }}

        # Kakao API
        KAKAO_ADMIN_KEY=${{ secrets.KAKAO_ADMIN_KEY }}
        KAKAO_TEMPLATE_ID=${{ secrets.KAKAO_TEMPLATE_ID }}
        EOL

    - name: Create production application.yml
      run: |
        mkdir -p src/main/resources
        cat > src/main/resources/application.yml << EOL
        spring:
          data:
            mongodb:
              host: mongodb
              port: 27017
              database: allrealmen
              username: ${MONGO_INITDB_ROOT_USERNAME}
              password: ${MONGO_INITDB_ROOT_PASSWORD}
              authentication-database: admin
          servlet:
            multipart:
              max-file-size: 10MB
              max-request-size: 10MB
          security:
            oauth2:
              client:
                registration:
                  naver:
                    client-id: ${NAVER_CLIENT_ID}
                    client-secret: ${NAVER_CLIENT_SECRET}
                    client-name: naver
                    authorization-grant-type: authorization_code
                    scope:
                      - name
                      - email
                    redirect-uri: ${OAUTH_REDIRECT_BASE_URL}/login/oauth2/code/naver
                    provider: naver-provider
                  google:
                    client-id: ${GOOGLE_CLIENT_ID}
                    client-secret: ${GOOGLE_CLIENT_SECRET}
                    client-name: google
                    authorization-grant-type: authorization_code
                    scope:
                      - profile
                      - email
                    redirect-uri: ${OAUTH_REDIRECT_BASE_URL}/login/oauth2/code/google
                    provider: google
                  kakao:
                    client-id: ${KAKAO_CLIENT_ID}
                    client-secret: ${KAKAO_CLIENT_SECRET}
                    client-name: kakao
                    authorization-grant-type: authorization_code
                    client-authentication-method: client_secret_post
                    scope:
                      - profile_nickname
                      - account_email
                    redirect-uri: ${OAUTH_REDIRECT_BASE_URL}/login/oauth2/code/kakao
                    provider: kakao-provider
                provider:
                  kakao-provider:
                    authorization-uri: https://kauth.kakao.com/oauth/authorize
                    token-uri: https://kauth.kakao.com/oauth/token
                    user-info-uri: https://kapi.kakao.com/v2/user/me
                    user-name-attribute: id
                  naver-provider:
                    authorization-uri: https://nid.naver.com/oauth2.0/authorize
                    token-uri: https://nid.naver.com/oauth2.0/token
                    user-info-uri: https://openapi.naver.com/v1/nid/me
                    user-name-attribute: response

        jwt:
          secret: ${JWT_SECRET}
          expiration: 86400000  # 24시간

        naver-cloud:
          sms:
            access-key: ${NAVER_CLOUD_ACCESS_KEY}
            secret-key: ${NAVER_CLOUD_SECRET_KEY}
            service-id: ${NAVER_CLOUD_SERVICE_ID}
            sender-phone: ${NAVER_CLOUD_SENDER_PHONE}

        logging:
          level:
            org.springframework.data.mongodb: DEBUG

        server:
          port: 8080

        kakao:
          api:
            admin-key: ${KAKAO_ADMIN_KEY}
            template-id: ${KAKAO_TEMPLATE_ID}
        EOL

    - name: Copy files to EC2
      run: |
        ssh ec2 "mkdir -p ~/config"
        scp docker-compose.yml ec2:~/
        scp .env ec2:~/
        scp src/main/resources/application.yml ec2:~/config/

    - name: Deploy to EC2
      run: |
        ssh ec2 "
          echo 'Ensuring Docker is installed and running...'
          if ! command -v docker &> /dev/null; then
            echo 'Docker not found, attempting to install...'
            if sudo yum --help &>/dev/null; then
              sudo yum update -y && sudo yum install -y docker
            elif sudo apt-get --help &>/dev/null; then
              sudo apt-get update -y && sudo apt-get install -y docker.io
            else
              echo 'Cannot determine package manager. Please install Docker manually on EC2.' && exit 1
            fi
            echo 'Docker installation process attempted.'
          else
            echo 'Docker already present.'
          fi

          if ! sudo systemctl is-active --quiet docker; then
            echo 'Docker service is not running. Starting and enabling Docker...'
            sudo systemctl start docker && sudo systemctl enable docker
            sleep 5 # Give Docker a moment to start
            if ! sudo systemctl is-active --quiet docker; then
              echo 'Failed to start Docker service. Please check EC2 instance.' && exit 1
            fi
            echo 'Docker service started and enabled.'
          else
            echo 'Docker service is already running.'
          fi

          echo 'Ensuring docker-compose is installed...'
          if ! command -v /usr/local/bin/docker-compose &> /dev/null; then \
            echo 'docker-compose not found, attempting to install...'; \
            REMOTE_OS=\\$(uname -s | tr '[:upper:]' '[:lower:]'); \
            REMOTE_ARCH=\\$(uname -m); \
            echo \\\"Attempting to download docker-compose for OS: \${REMOTE_OS}, ARCH: \${REMOTE_ARCH}\\\"; \
            sudo mkdir -p /usr/local/bin && \
            echo \\\"Attempting to download docker-compose to /usr/local/bin/docker-compose\\\" && \
            sudo curl -LfS https://github.com/docker/compose/releases/latest/download/docker-compose-\${REMOTE_OS}-\${REMOTE_ARCH} -o /usr/local/bin/docker-compose && \
            echo \\\"curl command completed. Checking file...\\\" && \
            if [ ! -s /usr/local/bin/docker-compose ]; then \
              echo \\\"Error: /usr/local/bin/docker-compose was not created or is empty after download.\\\" && \
              ls -l /usr/local/bin/ && \
              exit 1; \
            fi && \
            echo \\\"File /usr/local/bin/docker-compose downloaded successfully.\\\" && \
            sudo chmod +x /usr/local/bin/docker-compose && \
            echo 'docker-compose installed successfully:' && \
            /usr/local/bin/docker-compose --version; \
          else \
            echo 'docker-compose is already installed at /usr/local/bin/docker-compose:'; \
            /usr/local/bin/docker-compose --version; \
          fi

          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml pull
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml down || true
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml up -d
        "

   